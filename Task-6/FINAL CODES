
ESP 8266 CODE
#define BLYNK_TEMPLATE_ID "TMPL3pYU7nlUx"
#define BLYNK_TEMPLATE_NAME "SmartestHome"
#define BLYNK_AUTH_TOKEN "FRF70BbXEzGb6jINIyQPbFungQP7kiCU"

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

#define OUTPUT_PIN 4  // PD2 (GPIO4) for serial output

int LED1 = D1; // Red LED
int LED2 = D2; // Yellow LED
int LED3 = D3; // Green LED
int LED4 = D4; // Blue LED

char auth[] = "FRF70BbXEzGb6jINIyQPbFungQP7kiCU";  // Blynk Authentication Token
char ssid[] = "Ranga";  // WiFi SSID
char pass[] = "9916337761";  // WiFi Password

// Function to process LED control and send serial output
void processInput(int ledPin, int value, int virtualPin) {
    digitalWrite(ledPin, value);
    Blynk.virtualWrite(virtualPin, value);
    Serial.print("LED on V");
    Serial.print(virtualPin);
    Serial.print(" set to ");
    Serial.println(value);
    digitalWrite(OUTPUT_PIN, value);  // Send output to PD2
}

// Blynk Virtual Pin Handlers
BLYNK_WRITE(V0) { processInput(LED1, param.asInt(), 0); }
BLYNK_WRITE(V1) { processInput(LED2, param.asInt(), 1); }
BLYNK_WRITE(V2) { processInput(LED3, param.asInt(), 2); }
BLYNK_WRITE(V3) { processInput(LED4, param.asInt(), 3); }

void setup() {
    pinMode(LED1, OUTPUT);
    pinMode(LED2, OUTPUT);
    pinMode(LED3, OUTPUT);
    pinMode(LED4, OUTPUT);
    pinMode(OUTPUT_PIN, OUTPUT);  // Configure PD2 (GPIO4) as output

    Serial.begin(115200);
    Blynk.begin(auth, ssid, pass);
}

void loop() {
    Blynk.run();

    if (Serial.available()) {
        char data_received = Serial.read();
        
        switch (data_received) {
            case '1': processInput(LED1, HIGH, 0); break;
            case '2': processInput(LED1, LOW, 0); break;
            case '3': processInput(LED2, HIGH, 1); break;
            case '4': processInput(LED2, LOW, 1); break;
            case '5': processInput(LED3, HIGH, 2); break;
            case '6': processInput(LED3, LOW, 2); break;
            case '7': processInput(LED4, HIGH, 3); break;
            case '8': processInput(LED4, LOW, 3); break;
            default: Serial.println("Invalid Input"); break;
        }
    }
}



VSD CODE

#include <ch32v00x.h>
#include <stdio.h>
#include <string.h>

void UART1_Init(void) {
    RCC->APB2PCENR |= RCC_APB2Periph_USART1;  // Enable UART1 clock
    RCC->APB2PCENR |= RCC_APB2Periph_GPIOD;   // Enable GPIOD clock

    GPIOD->CFGLR &= ~(0xF << (2 * 4));  // Clear PD2 config
    GPIOD->CFGLR |= (0x4 << (2 * 4));   // Set PD2 as input with pull-up

    USART1->BRR = 48000000 / 9600; // Baud rate (Assuming 48MHz clock)
    USART1->CTLR1 |= USART_CTLR1_RE | USART_CTLR1_TE | USART_CTLR1_UE; // Enable RX, TX, and UART
}

char UART1_Read(void) {
    while (!(USART1->STATR & USART_STATR_RXNE)); // Wait until data is received
    return (char)USART1->DATAR;
}

void GPIO_Init(void) {
    RCC->APB2PCENR |= RCC_APB2Periph_GPIOD;  // Enable GPIOD clock

    // Set PD3, PD4, PD5, PD6 as output for LEDs
    GPIOD->CFGLR &= ~((0xF << (3 * 4)) | (0xF << (4 * 4)) | (0xF << (5 * 4)) | (0xF << (6 * 4)));
    GPIOD->CFGLR |= ((0x1 << (3 * 4)) | (0x1 << (4 * 4)) | (0x1 << (5 * 4)) | (0x1 << (6 * 4))); // General push-pull output
}

void LED_Control(int led, int state) {
    int pin = 3 + led; // LED 1 maps to PD3, etc.
    if (state) {
        GPIOD->BSHR = (1 << pin);  // Turn LED ON
    } else {
        GPIOD->BSHR = (1 << (pin + 16)); // Turn LED OFF
    }
}

int main(void) {
    SystemInit();
    UART1_Init();
    GPIO_Init();

    while (1) {
        if (USART1->STATR & USART_STATR_RXNE) { // Check if data is available
            char start = UART1_Read();
            if (start == 'L') {
                char led = UART1_Read();
                char state = UART1_Read();

                int ledNum = led - '1';  // Convert '1'-'4' to 0-3
                int ledState = state - '0'; // Convert '0' or '1' to int

                if (ledNum >= 0 && ledNum < 4) {
                    LED_Control(ledNum, ledState);
                }
            }
        }
    }
}
